scalar DateTime

directive @auth(role: UserRole) on FIELD_DEFINITION

# User
enum UserRole {
  USER
  ADMIN
}

type User {
  _id: ID!
  name: String!
  email: String!
  phone: String!
  role: UserRole!
}

type AuthPayload {
  token: String!
  user: User!
}

input UserSignUpInput {
  name: String!
  email: String!
  phone: String!
  password: String!
}

input UserSignInInput {
  email: String!
  password: String!
}

# Category
type Category {
  _id: ID!
  name: String!
}

input CategoryCreateInput {
  name: String!
}

input CategoryUpdateInput {
  name: String
}

# Product
enum Unit {
  M
  CM
  CX
  UN
  LT
  ML
  KG
  GR
}

enum ProductOrderByInput {
  name_ASC
  name_DESC
  price_ASC
  price_DESC
}

type Product {
  _id: ID!
  category: Category!
  name: String!
  description: String
  price: Float!
  unit: Unit!
}

input ProductCreateInput {
  category: ID!
  name: String!
  description: String
  price: Float!
  unit: Unit!
}

input ProductUpdateInput {
  category: ID
  name: String
  description: String
  price: Float
  unit: Unit
}

input ProductWhereInput {
  nameEq: String
  nameNe: String
  nameIn: [String!]
  nameNin: [String!]
  nameRegex: String
  nameOptions: String
  priceEq: Float
  priceNe: Float
  priceIn: [Float!]
  priceNin: [Float!]
  priceLt: Float
  priceLte: Float
  priceGt: Float
  priceGte: Float
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOR: [ProductWhereInput!]
}

# Order
enum OrderPaymentMethod {
  CASH
  CREDIT_CARD
}

enum OrderStatus {
  WAITING_PAYMENT
  IN_QUEUE
  PREPARING
  READY
  ON_THE_WAY
  DELIVERED
}

enum OrderOrderByInput {
  total_ASC
  total_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type Order {
  _id: ID!
  owner: User!
  items: [OrderItem!]!
  total: Float!
  paymentMethod: OrderPaymentMethod!
  changeFor: Float
  change: Float
  status: OrderStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order!
}

input OrderCreateInput {
  owner: ID
  items: [OrderItemCreateInput!]
  paymentMethod: OrderPaymentMethod!
  changeFor: Float
  change: Float
  status: OrderStatus
}

input OrderUpdateInput {
  owner: ID
  status: OrderStatus
  itemsToAdd: [OrderItemCreateInput!]
  itemsToUpdate: [OrderItemUpdateInput!]
  itemsToRemove: [ID!]
}

input OrderWhereInput {
  ownerEq: ID
  ownerNe: ID
  ownerIn: [ID!]
  ownerNin: [ID!]
  totalEq: Float
  totalNe: Float
  totalIn: [Float!]
  totalNin: [Float!]
  totalLt: Float
  totalLte: Float
  totalGt: Float
  totalGte: Float
  statusEq: OrderStatus
  statusNe: OrderStatus
  statusIn: [OrderStatus!]
  statusNin: [OrderStatus!]
  createdAtEq: DateTime
  createdAtNe: DateTime
  createdAtIn: [DateTime!]
  createdAtNin: [DateTime!]
  createdAtLt: DateTime
  createdAtLte: DateTime
  createdAtGt: DateTime
  createdAtGte: DateTime
  updatedAtEq: DateTime
  updatedAtNe: DateTime
  updatedAtIn: [DateTime!]
  updatedAtNin: [DateTime!]
  updatedAtLt: DateTime
  updatedAtLte: DateTime
  updatedAtGt: DateTime
  updatedAtGte: DateTime
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOR: [OrderWhereInput!]
}

input OrderSubscriptionWhereInput {
  mutationIn: [MutationType!]!
}

# OrderItem
type OrderItem {
  _id: ID!
  product: Product!
  quantity: Float!
  total: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input OrderItemCreateInput {
  product: ID!
  quantity: Float!
  total: Float!
}

input OrderItemUpdateInput {
  _id: ID!
  product: ID!
  quantity: Float!
  total: Float!
}

# Generic mutation types
enum MutationType {
  CREATED
  UPDATED
  DELETED
}

# Queries and Mutations
type Query {
  categories: [Category!]!
  category(_id: ID!): Category!
  products(
    skip: Int
    limit: Int
    orderBy: [ProductOrderByInput!]
    where: ProductWhereInput
  ): [Product!]!
  product(_id: ID!): Product!
  orders(
    skip: Int
    limit: Int
    orderBy: [OrderOrderByInput!]
    where: OrderWhereInput
  ): [Order!]! @auth
  order(_id: ID!): Order! @auth
}

type Mutation {
  signup(data: UserSignUpInput!): AuthPayload!
  signin(data: UserSignInInput!): AuthPayload!
  createCategory(data: CategoryCreateInput!): Category! @auth(role: ADMIN)
  deleteCategory(_id: ID!): Category! @auth(role: ADMIN)
  updateCategory(data: CategoryUpdateInput!, _id: ID!): Category!
    @auth(role: ADMIN)
  createProduct(data: ProductCreateInput!): Product! @auth(role: ADMIN)
  deleteProduct(_id: ID!): Product! @auth(role: ADMIN)
  updateProduct(data: ProductUpdateInput!, _id: ID!): Product!
    @auth(role: ADMIN)
  createOrder(data: OrderCreateInput!): Order! @auth
  deleteOrder(_id: ID!): Order! @auth
  updateOrder(data: OrderUpdateInput!, _id: ID!): Order! @auth
}

type Subscription {
  order(where: OrderSubscriptionWhereInput!): OrderSubscriptionPayload!
}
